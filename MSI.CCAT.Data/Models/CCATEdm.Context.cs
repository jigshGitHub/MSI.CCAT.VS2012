//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MSI.CCAT.Data.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;

    public partial class CCATDBEntities : DbContext
    {
        public CCATDBEntities()
            : base("name=CCATDBEntities")
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }

        public DbSet<Tbl_QuestionResponse> Tbl_QuestionResponse { get; set; }
        public DbSet<module> modules { get; set; }
        public DbSet<pageMenu> pageMenus { get; set; }
        public DbSet<pageMenuGroup> pageMenuGroups { get; set; }
        public DbSet<TBL_CHART> TBL_CHART { get; set; }
        public DbSet<Tbl_QuestionDeficient> Tbl_QuestionDeficient { get; set; }
        public DbSet<Tbl_Account> Tbl_Account { get; set; }
        public DbSet<Tbl_Agency> Tbl_Agency { get; set; }
        public DbSet<Tbl_ComplaintIssues> Tbl_ComplaintIssues { get; set; }
        public DbSet<Tbl_ComplaintReceivedBy> Tbl_ComplaintReceivedBy { get; set; }
        public DbSet<Tbl_CreditIssuer> Tbl_CreditIssuer { get; set; }
        public DbSet<Tbl_DebtorContactMethods> Tbl_DebtorContactMethods { get; set; }
        public DbSet<Tbl_DebtorContactTime> Tbl_DebtorContactTime { get; set; }
        public DbSet<Tbl_DebtorProducts> Tbl_DebtorProducts { get; set; }
        public DbSet<Tbl_FinalActionSteps> Tbl_FinalActionSteps { get; set; }
        public DbSet<Tbl_LawFirm> Tbl_LawFirm { get; set; }
        public DbSet<Tbl_Owner> Tbl_Owner { get; set; }
        public DbSet<Tbl_OwnerResponses> Tbl_OwnerResponses { get; set; }
        public DbSet<Tbl_States> Tbl_States { get; set; }
        public DbSet<Tbl_ModulesForRoles> Tbl_ModulesForRoles { get; set; }
        public DbSet<Tbl_QuestionBank> Tbl_QuestionBank { get; set; }
        public DbSet<Tbl_QuestionModule> Tbl_QuestionModule { get; set; }
        public DbSet<Tbl_ComplaintMain> Tbl_ComplaintMain { get; set; }
        public DbSet<Tbl_ComplaintStatus> Tbl_ComplaintStatus { get; set; }
        public DbSet<aspnet_Applications> aspnet_Applications { get; set; }
        public DbSet<aspnet_Membership> aspnet_Membership { get; set; }
        public DbSet<aspnet_Roles> aspnet_Roles { get; set; }
        public DbSet<aspnet_Users> aspnet_Users { get; set; }
        public DbSet<Tbl_ComplaintType> Tbl_ComplaintType { get; set; }
        public DbSet<vw_Account> vw_Account { get; set; }
        public DbSet<vw_aspnet_membership> vw_aspnet_membership { get; set; }
        public DbSet<LU_Allegation1> LU_Allegation1 { get; set; }
        public DbSet<LU_Allegation2> LU_Allegation2 { get; set; }
        public DbSet<LU_CA1AssignedTo> LU_CA1AssignedTo { get; set; }
        public DbSet<LU_CA1Recommendation> LU_CA1Recommendation { get; set; }
        public DbSet<LU_CA1RootCause> LU_CA1RootCause { get; set; }
        public DbSet<LU_CA1Violation> LU_CA1Violation { get; set; }
        public DbSet<LU_CA2AssignedTo> LU_CA2AssignedTo { get; set; }
        public DbSet<LU_CA2Recommendation> LU_CA2Recommendation { get; set; }
        public DbSet<LU_CA2RootCause> LU_CA2RootCause { get; set; }
        public DbSet<LU_CA2Violation> LU_CA2Violation { get; set; }
        public DbSet<LU_CA3AssignedTo> LU_CA3AssignedTo { get; set; }
        public DbSet<LU_CA3Recommendation> LU_CA3Recommendation { get; set; }
        public DbSet<LU_CA3RootCause> LU_CA3RootCause { get; set; }
        public DbSet<LU_CA3Violation> LU_CA3Violation { get; set; }
        public DbSet<LU_ComplaintAgainst> LU_ComplaintAgainst { get; set; }
        public DbSet<LU_ComplaintCategory> LU_ComplaintCategory { get; set; }
        public DbSet<LU_ComplaintClassification> LU_ComplaintClassification { get; set; }
        public DbSet<LU_ComplaintIntakeStatus> LU_ComplaintIntakeStatus { get; set; }
        public DbSet<LU_OwnershipStatus> LU_OwnershipStatus { get; set; }
        public DbSet<LU_ResolutionRequest> LU_ResolutionRequest { get; set; }
        public DbSet<LU_RootCause1> LU_RootCause1 { get; set; }
        public DbSet<LU_RootCause2> LU_RootCause2 { get; set; }
        public DbSet<LU_RootCause3> LU_RootCause3 { get; set; }
        public DbSet<LU_Stakeholder1> LU_Stakeholder1 { get; set; }
        public DbSet<LU_Stakeholder2> LU_Stakeholder2 { get; set; }
        public DbSet<LU_Stakeholder3> LU_Stakeholder3 { get; set; }
        public DbSet<LU_ViolationAlleged> LU_ViolationAlleged { get; set; }
        public DbSet<LU_AccountStatusCurrent> LU_AccountStatusCurrent { get; set; }
        public DbSet<LU_AccountStatusPrevious> LU_AccountStatusPrevious { get; set; }
        public DbSet<LU_AgencyDesignation> LU_AgencyDesignation { get; set; }
        public DbSet<LU_ConsumerGender> LU_ConsumerGender { get; set; }
        public DbSet<LU_CurrentResponsibility> LU_CurrentResponsibility { get; set; }
        public DbSet<LU_DebtType> LU_DebtType { get; set; }
        public DbSet<LU_InvestorDesignation> LU_InvestorDesignation { get; set; }
        public DbSet<LU_MediaType> LU_MediaType { get; set; }
        public DbSet<LU_OriginalLenderProduct> LU_OriginalLenderProduct { get; set; }
        public DbSet<LU_OwnerDesignation> LU_OwnerDesignation { get; set; }
        public DbSet<LU_PortfolioBLSDesignation> LU_PortfolioBLSDesignation { get; set; }
        public DbSet<LU_PortfolioResaleRestriction> LU_PortfolioResaleRestriction { get; set; }
        public DbSet<LU_ResponsibilityCurrent> LU_ResponsibilityCurrent { get; set; }
        public DbSet<LU_ResponsibilityPrevious> LU_ResponsibilityPrevious { get; set; }
        public DbSet<LU_TransactionType> LU_TransactionType { get; set; }
        public DbSet<LU_VendorDesignation> LU_VendorDesignation { get; set; }
        public DbSet<Tbl_ConsumerDetails> Tbl_ConsumerDetails { get; set; }
        public DbSet<Tbl_Cosigner> Tbl_Cosigner { get; set; }
        public DbSet<Tbl_InvestorDetails> Tbl_InvestorDetails { get; set; }
        public DbSet<Tbl_MediaDetails> Tbl_MediaDetails { get; set; }
        public DbSet<Tbl_PortfolioDetails> Tbl_PortfolioDetails { get; set; }
        public DbSet<Tbl_PortfolioOfAccounts> Tbl_PortfolioOfAccounts { get; set; }
        public DbSet<Tbl_Vendor> Tbl_Vendor { get; set; }

        public virtual ObjectResult<Tbl_Account> GetAccounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tbl_Account>("GetAccounts");
        }

        public virtual ObjectResult<Tbl_Account> GetAccounts(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tbl_Account>("GetAccounts", mergeOption);
        }

        public virtual ObjectResult<Tbl_Account> GetAccountsByNumber(string accountNumber)
        {
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("accountNumber", accountNumber) :
                new ObjectParameter("accountNumber", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tbl_Account>("GetAccountsByNumber", accountNumberParameter);
        }

        public virtual ObjectResult<Tbl_Account> GetAccountsByNumber(string accountNumber, MergeOption mergeOption)
        {
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("accountNumber", accountNumber) :
                new ObjectParameter("accountNumber", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tbl_Account>("GetAccountsByNumber", mergeOption, accountNumberParameter);
        }

        public virtual ObjectResult<Tbl_Account> GetAccountsByAgency(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tbl_Account>("GetAccountsByAgency", idParameter);
        }

        public virtual ObjectResult<Tbl_Account> GetAccountsByAgency(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tbl_Account>("GetAccountsByAgency", mergeOption, idParameter);
        }

        public virtual ObjectResult<vw_Account> AccountSearch(string firstOrLastName, string accountNumber, string creditorName, string accountOriginal, string roleEntityValue, string role, string phone, int? pageNo, int? pageSize)
        {
            var firstOrLastNameParameter = firstOrLastName != null ?
                new ObjectParameter("firstOrLastName", firstOrLastName) :
                new ObjectParameter("firstOrLastName", typeof(string));

            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("accountNumber", accountNumber) :
                new ObjectParameter("accountNumber", typeof(string));

            var creditorNameParameter = creditorName != null ?
                new ObjectParameter("creditorName", creditorName) :
                new ObjectParameter("creditorName", typeof(string));

            var accountOriginalParameter = accountOriginal != null ?
                new ObjectParameter("accountOriginal", accountOriginal) :
                new ObjectParameter("accountOriginal", typeof(string));

            var roleEntityValueParameter = roleEntityValue != null ?
                new ObjectParameter("roleEntityValue", roleEntityValue) :
                new ObjectParameter("roleEntityValue", typeof(string));

            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));

            var phoneParameter = string.IsNullOrEmpty(phone) ?
                new ObjectParameter("phoneNumber", typeof(string)) : new ObjectParameter("phoneNumber", phone);

            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo.Value) : new ObjectParameter("pageNo", typeof(int));

            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize.Value) : new ObjectParameter("pageSize", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<vw_Account>("AccountSearch", firstOrLastNameParameter, accountNumberParameter, creditorNameParameter, accountOriginalParameter, roleEntityValueParameter, roleParameter, phoneParameter, pageNoParameter, pageSizeParameter);
        }

        public virtual ObjectResult<vw_Account> AccountSearch(string firstOrLastName, string accountNumber, string creditorName, string accountOriginal, string roleEntityValue, string role, string phone, int? pageNo, int? pageSize, MergeOption mergeOption)
        {
            var firstOrLastNameParameter = firstOrLastName != null ?
                new ObjectParameter("firstOrLastName", firstOrLastName) :
                new ObjectParameter("firstOrLastName", typeof(string));

            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("accountNumber", accountNumber) :
                new ObjectParameter("accountNumber", typeof(string));

            var creditorNameParameter = creditorName != null ?
                new ObjectParameter("creditorName", creditorName) :
                new ObjectParameter("creditorName", typeof(string));

            var accountOriginalParameter = accountOriginal != null ?
                new ObjectParameter("accountOriginal", accountOriginal) :
                new ObjectParameter("accountOriginal", typeof(string));

            var roleEntityValueParameter = roleEntityValue != null ?
                new ObjectParameter("roleEntityValue", roleEntityValue) :
                new ObjectParameter("roleEntityValue", typeof(string));

            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));

            var phoneParameter = string.IsNullOrEmpty(phone) ?
               new ObjectParameter("phoneNumber", typeof(string)) : new ObjectParameter("phoneNumber", phone);

            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo.Value) : new ObjectParameter("pageNo", typeof(int));

            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize.Value) : new ObjectParameter("pageSize", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<vw_Account>("AccountSearch", mergeOption, firstOrLastNameParameter, accountNumberParameter, creditorNameParameter, accountOriginalParameter, roleEntityValueParameter, roleParameter, pageNoParameter, pageSizeParameter);
        }
    }
}
